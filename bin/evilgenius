#!/usr/bin/env python

import os
import sys
import datetime

# Hack to set the proper sys.path. Overcomes the export PYTHONPATH pain.
sys.path[:] = map(os.path.abspath, sys.path)
sys.path.insert(0, os.path.abspath(os.getcwd()))

from evilgenius.resources import CensorshipProvider, NetworkMeasurementInstrument, Router, EvilGeniusResources
from evilgenius.vagrant import VagrantController, VagrantBox
from evilgenius.networking import NetworkTopology

import logging

if __name__ == "__main__":
    try:
        import argparse
    except ImportError:
        print("[!] Error! Evil Genius requires argparse.")
        print("")
        print("argparse is found in python >= 2.7.")
        print("If you do not wish to update to a modern version of python " \
              "you must manually install the argparse module.")

    parser = argparse.ArgumentParser()
    parser.add_argument("--network-measurement", "-n",
                        help="Run the specified network measurement instruments",
                        action='append')
    parser.add_argument("--censorship-providers", "-c",
                        help="Run the network measurement with the specified censorship providers",
                        action='append')
    parser.add_argument("--list", "-l", action="store_true",
                        help="List all available network measurement instruments and censorship providers")
    parser.add_argument("--dry-run", "-d", action="store_true", help="do not perform any action, just spit out the vagrantfile")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="increase output verbosity")
    parser.add_argument("-w", "--working-directory", help="Set working directory for vagrant. A temporary \
            directory is created if not specified")
    parser.add_argument("-L", "--log-directory", help="set log directory for network measurement instruments. \
                        A temporary diretory is created inside the working directory is created if not specified.")


    args =  parser.parse_args()

    # initialize logging
    if args.verbose:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.ERROR

    logging.basicConfig(format="[%(levelname)s] %(message)s",
                        level=loglevel)
    logging.info('ohai, this is evilgenius.')

    if args.list:
        evil_genius_resources = EvilGeniusResources()
        evil_genius_resources.list_censorship_providers()
        evil_genius_resources.list_network_measurement_instruments()
    elif args.censorship_providers and args.network_measurement:
        ## prepare network

        # initalize a temporary directory if no working directory is specified
        if not args.working_directory:
            import tempfile
            working_directory = tempfile.mkdtemp()
        else:
            if not os.path.isdir(args.working_directory):
                logging.error("The working directory does not exist. Exitting.")
                sys.exit(1)
            working_directory = args.working_directory


        # initialize VagrantController
        controller = VagrantController(root=working_directory)

        # create instruments and providers, if one of them is not available,
        # notify user
        censorship_providers = []
        for c in args.censorship_providers:
            try:
                provider_path = "resources/censorship-providers/{name}/{name}.yml".format(name=c)
                c = CensorshipProvider(controller=controller, descriptor_path=provider_path)
                censorship_providers.append(c)
            except IOError, e:
                logging.error("Provider {filename} not found".format(filename=e.filename))
                sys.exit(1)

        network_measurement_instruments = []
        for n in args.network_measurement:
            try:
                provider_path = "resources/network-measurement-instruments/{name}/{name}.yml".format(name=n)
                n = NetworkMeasurementInstrument(controller=controller, descriptor_path=provider_path)
                network_measurement_instruments.append(n)
            except IOError, e:
                logging.error("Instrument {filename} not found".format(filename=e.filename))
                sys.exit(1)

        # mash them together in a network Topology
        network = NetworkTopology(router=Router(controller=controller),
                                  network_measurement_instruments=network_measurement_instruments,
                                  censorship_providers=censorship_providers)

        # if it's just a dry run, just print the contents of the vagrantfile
        # and exit
        if args.dry_run:
            print network.vagrantfile
            sys.exit(0)

        # write out the Vagrantfile
        with open(os.path.join(working_directory, 'Vagrantfile'), 'w') as vagrantfile:
            vagrantfile.write(network.vagrantfile)

        # Pull that sh*t up
        controller.up()

        # iterate over instruments
        if not args.log_directory:
            log_directory = os.path.join(working_directory, 'logs')
        else:
            log_directory = args.log_directory

        if not os.path.exists(log_directory):
            os.mkdir(log_directory)

        current_timestamp = datetime.datetime.now().strftime('%s')

        for instrument in network_measurement_instruments:
            instrument.run(os.path.join(log_directory, "%s-%s.log" % (instrument.id, current_timestamp)))

        # tear that sh*t down
        controller.destroy()

        # present results to user
        pass
    else:
        parser.print_help()
